name: Terraform Best Practices Deployment Workflow

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform Action'
        required: true
        default: 'apply'
        type: choice
        options: [apply, destroy]

permissions:
  id-token: write
  contents: read

################################################################################
# 1️⃣  LINT & SECURITY  ────────────────────────────────────────────────────────
################################################################################
jobs:
  lint-and-security:
    name: Lint and Security Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install TFLint
        run: |
          wget https://github.com/terraform-linters/tflint/releases/download/v0.50.2/tflint_linux_amd64.zip
          unzip tflint_linux_amd64.zip
          sudo mv tflint /usr/local/bin/
          tflint --version

      - name: Run TFLint
        run: tflint --init && tflint -f compact

      - name: Install Checkov
        run: pip install checkov

      - name: Run Checkov with soft fail
        run: checkov --directory . --soft-fail

################################################################################
# 2️⃣  TERRAFORM TESTS  (unit‑style, no backend, no AWS calls)  ─────────────────
################################################################################
  terraform-tests:
    name: Terraform Tests
    runs-on: ubuntu-latest
    needs: lint-and-security      # run only if lint + security pass

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3      # v3 supports 1.6+ features
        with:
          terraform_version: 1.7.5
          terraform_wrapper: false

      # Local init → no backend, fast, safe
      - name: Terraform init (local)
        run: terraform init -backend=false -input=false

      - name: Terraform tests
        run: terraform test -no-color

################################################################################
# 3️⃣  PLAN / APPLY / DESTROY  ─────────────────────────────────────────────────
################################################################################
  terraform:
    name: Terraform ${{ github.event.inputs.action }}
    runs-on: ubuntu-latest
    needs: [lint-and-security, terraform-tests]   # wait for both to pass

    env:
      AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::590183969845:role/github-assume-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Format Terraform code
        run: terraform fmt -recursive

      - name: Initialize Terraform (backend enabled)
        run: terraform init -input=false

      - name: Validate Terraform
        run: terraform validate

      # --------------- PLAN -----------------------------------------------
      - name: Terraform Plan
        if: github.event.inputs.action == 'apply'
        run: terraform plan -var-file="terraform.tfvars" \
                            -lock-timeout=30s -input=false -out=tfplan.binary

      - name: Show Terraform Plan Summary
        if: github.event.inputs.action == 'apply'
        run: terraform show -no-color tfplan.binary

      # --------------- APPLY ----------------------------------------------
      - name: Terraform Apply (from saved plan)
        if: github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve tfplan.binary

      # --------------- DESTROY --------------------------------------------
      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: terraform destroy -auto-approve
